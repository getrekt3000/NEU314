### NEU314 Exercises 5 - Trang Uyen Nguyen

Part 1:

1a. M doubled the length of the vectors without changing their
    directions (by stretching them by 2 along both axes).

```julia
include("animate_matrix.jl")

x = [0.5 0.8 0.7; 1 0.2 0.3]
M = [2 0; 0 2]
animate_matrix(M, seed = x)
```

1b.
```julia
M2 = [2 0; 0 1]
animate_matrix(M2)
PyPlot.title("M2")
savefig("M2")
```
![M2](https://user-images.githubusercontent.com/56043343/67152989-9d135800-f2af-11e9-98c0-5753721fe7f8.png)
```julia
animate_matrix(M2, seed = x)
PyPlot.title("M2 Applied To X")
savefig("M2onx")
```
![M2onx](https://user-images.githubusercontent.com/56043343/67152990-a4d2fc80-f2af-11e9-8743-18d11bc54bfe.png)

1c.
```julia
a = 2*pi/3
R=[cos(a) sin(a); -sin(a) cos(a)]
animate_matrix(R, seed=x)
```
1d.
```julia
animate_matrix((inv(R),R), seed = x)
PyPlot.title("R, then R^-1")
savefig("RR1")
```
![RR1](https://user-images.githubusercontent.com/56043343/67153009-16ab4600-f2b0-11e9-854c-cc26b4fca629.png)
```julia
animate_matrix((R,R,R), seed = x)
PyPlot.title("R Three Times")
savefig("Rx3")
```
![Rx3](https://user-images.githubusercontent.com/56043343/67153014-21fe7180-f2b0-11e9-922f-d8f2c7d92c0f.png)

1e.
```julia
A = M2 * R
print(A)
[-1.0 1.73205; -0.866025 -0.5]

B = R * M2
print(B)
[-1.0 0.866025; -1.73205 -0.5]
```
INSERT PIC DONE B Y  H A N D
```julia
# rotates, then stretches by 2 along the x-axis
animate_matrix((M2,R))
PyPlot.title("Rotates then Stretches by 2 Horizontally")
savefig("RSbyx")
```
![RSbyx](https://user-images.githubusercontent.com/56043343/67153036-b963c480-f2b0-11e9-9c59-4eb9edcb7e4c.png)
```julia
# same transformation as previous but in one step
animate_matrix(A)
PyPlot.title("A")
savefig("A")
```
![A](https://user-images.githubusercontent.com/56043343/67153049-fc259c80-f2b0-11e9-8862-77ab238bec07.png)
```julia
# stretches by 2 along the x-axis, then rotates
animate_matrix((R,M2))
PyPlot.title("Stretches by 2 Horizontally then Rotates")
savefig("SRbyx")
```
![SRbyx](https://user-images.githubusercontent.com/56043343/67153068-4018a180-f2b1-11e9-90bb-797972065a01.png)
```julia
# same transformation as previous but in one step
animate_matrix(B)
PyPlot.title("B")
savefig("B")
```
![B](https://user-images.githubusercontent.com/56043343/67153072-43139200-f2b1-11e9-885b-4639ffeca685.png)

When the transformations are done at the same time it looks as
though the points are rotated along an oval (a circle
stretched out). A and B don't give the same output because
they do the transformations in different order.

1f.
```julia
M3 = [0.5 0 ; 0 2]
animate_matrix(M3)
PyPlot.title("M3")
savefig("M3")
```
![M3](https://user-images.githubusercontent.com/56043343/67153092-75bd8a80-f2b1-11e9-8039-718c4176b051.png)
```julia
M4 = [1.25 0.75 ; 0.75 1.25]
animate_matrix(M4)
PyPlot.title("M4")
savefig("M4")
```
![M4](https://user-images.githubusercontent.com/56043343/67153093-75bd8a80-f2b1-11e9-8578-ae1deb317106.png)

M3 halves vectors along the x-axis and doubles them along the
y-axis.

M4 and M3 are similar matrices, with M4 doing the same
transformation as M3 but along the basis:
B= {(1/sqrt(2), -1/sqrt(2)), (-1/sqrt(2),-1/sqrt(2)}
instead of the standard basis.

1g.

The first column of H is half the first column of V3 and the second
column of H byis twice the second column of V3.
```julia
m = 1/sqrt(2)
V3 = [m -m; -m -m]
C = M3 * V3
print(C)
[0.353553 -0.353553; -1.41421 -1.41421]

D = V3 * C
print(D)
[1.25 0.75; 0.75 1.25]

animate_matrix((V3,M3,V3))
PyPlot.title("V3 then M3 then V3")
savefig("VMV")
```
![VMV](https://user-images.githubusercontent.com/56043343/67153121-c8974200-f2b1-11e9-9304-9a402735fd3b.png)
